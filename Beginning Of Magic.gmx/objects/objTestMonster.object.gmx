<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTestMonster</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Grid
/*
myGrid = ds_grid_create(sprite_width, sprite_height);
ds_grid_set_disk(myGrid, ds_grid_width(myGrid) / 2, ds_grid_height(myGrid) / 2, 5, 1);

show_message("DS Grid Height: " + string(ds_grid_height(myGrid))); */

myGrid[0,0] = undefined;

/* Possible another system for holding crit data
critSpots[0] = "511|207";
for(i = 1; i &lt; string_length(critSpots[0]); ++i) {
    if(string_char_at(critSpots[0], i) == "|") {
        //Cut string in half
        
    }
} */
critCount = 0; //For setting the crits on the monster

critI[0] = 5;
critI[1] = 6;
critI[2] = 8;
critI[3] = 8;
critI[4] = 9;
critI[5] = 9;

critJ[0] = 2;
critJ[1] = 2;
critJ[2] = 2;
critJ[3] = 3;
critJ[4] = 2;
critJ[5] = 3;

squareSize = 16;
myWidth = sprite_width;
myHeight = sprite_height;
myWidthSquares = myWidth / squareSize;
myHeightSquares = myHeight / squareSize;

scrCreateMonsterHitBoxes();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
if(keyboard_check(ord("A"))) {
    x -= 5;
}
if(keyboard_check(ord("W")))
    y -= 5;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create hitboxes when enemy moves
if(xprevious != x || yprevious != y) {
    scrDestroyHitBoxes();
    scrCreateMonsterHitBoxes();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw grid on monster OLD WAY
draw_self();
//var k = 0;
//Draws squares from top left to bottom right of monster
/*
for(l = 0; l &lt;= ceil(myHeightSquares); ++l) {
    for(i = 0; i &lt;= ceil(myWidthSquares); ++i) {
        if(j + 1 &gt; array_length_1d(colours))
            j = 0;
        draw_set_colour(colours[j]);
        ++j;
        draw_set_alpha(.75);
        draw_rectangle(bbox_left + (i * squareSize), bbox_top + (l * squareSize), 
        bbox_left + ((i + 1) * squareSize), bbox_top + squareSize, false)
    }
} */

//The hard way
/*
var col = 0;
for(i = 0; i &lt; ceil(myWidthSquares); ++i) {
    if(col + 1 &gt; array_length_1d(colours))
        col = 0;
    draw_set_colour(colours[col]);
    ++col;
    draw_set_alpha(.75);
    //Column 1
    draw_rectangle(bbox_left, bbox_top + (i * squareSize), 
    bbox_left + squareSize, bbox_top + ((i + 1) * squareSize), false);
    //Column 2
    draw_rectangle(bbox_left + squareSize, bbox_top + (i * squareSize), 
    bbox_left + (squareSize * 2), bbox_top + ((i + 1) * squareSize), false);
    //Column 3
    draw_rectangle(bbox_left + (squareSize * 2), bbox_top + (i * squareSize), 
    bbox_left + (squareSize * 3), bbox_top + ((i + 1) * squareSize), false);
    //Column 4
    draw_rectangle(bbox_left + (squareSize * 3), bbox_top + (i * squareSize), 
    bbox_left + (squareSize * 4), bbox_top + ((i + 1) * squareSize), false);
} */

/*
var col = 0;
for(i = 0; i &lt; ceil(myHeightSquares); ++i) {
    if(col + 1 &gt; array_length_1d(colours))
        col = 0;
    draw_set_colour(colours[col]);
    ++col;
    draw_set_alpha(.75);
    //Row 1
    draw_rectangle(bbox_left + (i * squareSize), bbox_top, 
        bbox_left + ((i + 1) * squareSize), bbox_top + squareSize, false)
    //Row 2
    draw_rectangle(bbox_left + (i * squareSize), bbox_top + squareSize, 
        bbox_left + ((i + 1) * squareSize), bbox_top + (squareSize * 2), false)
    //Row 3
    draw_rectangle(bbox_left + (i * squareSize), bbox_top + (squareSize * 2), 
        bbox_left + ((i + 1) * squareSize), bbox_top + (squareSize * 3), false)
} */


//Draws squares from top left to bottom right of monster -- WORKS
/*
var col = 0;
for(i = 0; i &lt; ceil(myHeightSquares); ++i) {
    for( j = 0; j &lt; ceil(myWidthSquares); ++j) {
        if(col + 1 &gt; array_length_1d(colours))
            col = 0;
        draw_set_colour(colours[col]);
        ++col;
        draw_set_alpha(.75);
        draw_rectangle(bbox_left + (i * squareSize), bbox_top + (j * squareSize), 
            bbox_left + ((i + 1) * squareSize), bbox_top + ((j + 1) * squareSize), false)
    }
} */
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
