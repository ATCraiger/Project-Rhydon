<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character Variables
leftStick = 0;
rightStick = 0;

//Leveling Data
currentLevel = 1;
currentXP = 0;
maxXP = (currentLevel * 25);

//Character Information
firstName = "";
lastName = "";
age = "";
knowsMagic = false;

//Combat Info
maxHealth = (10 + currentLevel);
currentHealth = maxHealth;
maxStamina = (100 + (currentLevel * 25));
currentStamina = maxStamina;
staminaRecovery = .25;
weaponDamage = 5;
damageOut = weaponDamage * (currentStamina/maxStamina);
empoweredAttack = false; //When the player does a perfect attack
isDefending = false; //Can block attack for others. While defending, damage drains health and stamina. Stamina also recovers slower
hasBadAim = true; //If they get a perfect focused attack
tempAT = "Focused"; //If they can attack with both, this is changed
menuLevel = 0;
isInMenu = false;
isFighting = false;
isDefending = false;
attackCost = 100;
rollCost = 25;
rollDistance = 50;

//Weapon Info, all pulled from file and saved here. Only changed when changing weapons
weaponSprite = "";
weaponName = "";
weaponAT = "";
weaponDamage = 5;
weaponET = "";

//Movement Info
playerSpeed = 3.5;
originalPlayerSpeed = playerSpeed;
playerRunSpeed = 6;
battleMoveSpeed = 2.5;
canMove = true;
globalvar myDir;
myDir = 0;
battleCollisionSpeed = battleMoveSpeed + 1.5;

//Sprite Control
image_speed = 0;

//Transitioning Info
battleRoom = "";
enemyID = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Enemies &amp; Player 2 In Battle
instance_create(500, 500, enemyID);
instance_create(100, 100, playerParty[1]); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Non-Combat Movement
gamepad_set_axis_deadzone(0, .1);
//leftStickThreshhold
lst = .2;
leftStickHoriz = gamepad_axis_value(0, gp_axislh);
leftStickVert = gamepad_axis_value(0, gp_axislv);
        //Just Sara//
if(gamepad_is_connected(0) &amp;&amp; !inCombat &amp;&amp; partyCanMove)
{
    if(!inCombat) {
        if((leftStickHoriz &gt; lst) &amp;&amp; place_free(x + playerSpeed, y)) //Walk right
        {
            x -= (leftStickHoriz * -playerSpeed);
            sprite_index = sprSaraWalkRight;
            image_index += leftStickHoriz / 3;
            myDir = 90;
        }
        if((leftStickHoriz &lt; -lst) &amp;&amp; place_free(x - playerSpeed, y)) //Walk left
        {
            x -= (leftStickHoriz * -playerSpeed);
            sprite_index = sprSaraWalkLeft;
            image_index -= leftStickHoriz / 3;
            myDir = 270;
        }   
        if((leftStickVert &gt; lst) &amp;&amp; place_free(x, y + playerSpeed)) //Walk Down
        {
            y -= (leftStickVert * -playerSpeed);
            sprite_index = sprSaraWalkDown;
            image_index += leftStickVert / 3;
            myDir = 180;
        }
        if((leftStickVert &lt; -lst) &amp;&amp; place_free(x, y - playerSpeed)) //Walk Up
        {
            y -= (leftStickVert * -playerSpeed);
            sprite_index = sprSaraWalkUp;
            image_index -= leftStickVert / 3;
            myDir = 0;
        }
        //Run
        if(gamepad_button_check(0, gp_stickl)) {
            playerSpeed = playerRunSpeed;
        }
        if((abs(leftStickVert) &lt; lst)  &amp;&amp; (abs(leftStickHoriz) &lt; lst) &amp;&amp; (playerSpeed == playerRunSpeed)){
            playerSpeed = originalPlayerSpeed;
        }
    }
}
/*
///Combat movement
else if(gamepad_is_connected(0) &amp;&amp; inCombat)
{
    if(object_get_name(object_index) == playerParty[0]) {
        if((leftStickHoriz &gt; lst) &amp;&amp; place_free(x + playerSpeed, y)) //Walk right
        {
            x -= (leftStickHoriz * -playerSpeed);
            sprite_index = myAnims[0];
            image_index += leftStickHoriz / 3;
            myDir = 90;
        }
        if((leftStickHoriz &lt; -lst) &amp;&amp; place_free(x - playerSpeed, y)) //Walk left
        {
            x -= (leftStickHoriz * -playerSpeed);
            sprite_index = myAnims[2];
            image_index -= leftStickHoriz / 3;
            myDir = 270;
        }   
        if((leftStickVert &gt; lst) &amp;&amp; place_free(x, y + playerSpeed)) //Walk Down
        {
            y -= (leftStickVert * -playerSpeed);
            sprite_index = myAnims[3];
            image_index += leftStickVert / 3;
            myDir = 180;
        }
        if((leftStickVert &lt; -lst) &amp;&amp; place_free(x, y - playerSpeed)) //Walk Up
        {
            y -= (leftStickVert * -playerSpeed);
            sprite_index = myAnims[1];
            image_index -= leftStickVert / 3;
            myDir = 0;
        }
    }
}
            ///Full Party on Screen
/*
if(gamepad_is_connected(0) &amp;&amp; !inCombat &amp;&amp; partyCanMove) {
    gamepad_set_axis_deadzone(0, .1);
    lst = .2;
    
    leftStickHoriz = gamepad_axis_value(0, gp_axislh);
    leftStickVert = gamepad_axis_value(0, gp_axislv);
    
    //Party Walks Right
    if(leftStickHoriz &lt; -lst) {
        partySize = array_length_1d(playerParty);
        for(i = 0; i &lt; partySize; ++i) {
            if((i + 1) &lt; partySize) {
                playerParty[i + 1].currentAnim = playerParty[i].currentAnim;
                playerParty[i + 1].sprite_index = playerParty[i + 1].myAnims[currentAnim];
                playerParty[i + 1].image_index += leftStickHoriz / 3;
                playerParty[i + 1].x -= (leftStickHoriz * -playerSpeed);
            }
        }
        playerParty[0].sprite_index = playerParty[0].myAnims[0];
        playerParty[0].image_index += leftStickHoriz/3;
        playerParty[0].x -= (leftStickHoriz * -playerSpeed);
        playerParty[0].currentAnim = 0;
    }
    //Party Walks Up
    if(leftStickVert &gt; lst) {
        partySize = array_length_1d(playerParty);
        for(i = 0; i &lt; partySize; ++i) {
            if((i + 1) &lt; partySize) {
                playerParty[i + 1].currentAnim = playerParty[i].currentAnim;
                playerParty[i + 1].sprite_index = playerParty[i + 1].myAnims[currentAnim];
                playerParty[i + 1].image_index += leftStickVert / 3;
                playerParty[i + 1].y -= (leftStickVert * -playerSpeed);
            }
        }
        playerParty[0].sprite_index = playerParty[0].myAnims[1];
        playerParty[0].image_index += leftStickVert/3;
        playerParty[0].y -= (leftStickVert * -playerSpeed);
        playerParty[0].currentAnim = 1;
    }
    //Party Walks Left
    if(leftStickHoriz &gt; lst) {
        partySize = array_length_1d(playerParty);
        for(i = 0; i &lt; partySize; ++i) {
            if((i + 1) &lt; partySize) {
                playerParty[i + 1].currentAnim = playerParty[i].currentAnim;
                playerParty[i + 1].sprite_index = playerParty[i + 1].myAnims[currentAnim];
                playerParty[i + 1].image_index += leftStickHoriz / 3;
                playerParty[i + 1].x -= (leftStickHoriz * -playerSpeed);
            }
        }
        playerParty[0].sprite_index = playerParty[0].myAnims[2];
        playerParty[0].image_index += leftStickHoriz/3;
        playerParty[0].x -= (leftStickHoriz * -playerSpeed);
        playerParty[0].currentAnim = 2;
    }
    //Party Walks Down
    if(leftStickVert &lt; -lst) {
        partySize = array_length_1d(playerParty);
        for(i = 0; i &lt; partySize; ++i) {
            if((i + 1) &lt; partySize) {
                playerParty[i + 1].currentAnim = playerParty[i].currentAnim;
                playerParty[i + 1].sprite_index = playerParty[i + 1].myAnims[currentAnim];
                playerParty[i + 1].image_index += leftStickVert / 3;
                playerParty[i + 1].y -= (leftStickVert * -playerSpeed);
            }
        }
        playerParty[0].sprite_index = playerParty[0].myAnims[3];
        playerParty[0].image_index += leftStickVert/3;
        playerParty[0].y -= (leftStickVert * -playerSpeed);
        playerParty[0].currentAnim = 3;
    }
}
/*
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat Movement
if(inCombat) {
    //Controller Stick Setup
    gamepad_set_axis_deadzone(0, .1);
    lst = .2;
    leftStickHoriz = gamepad_axis_value(0, gp_axislh);
    leftStickVert = gamepad_axis_value(0, gp_axislv);
    rightStickHoriz = gamepad_axis_value(0, gp_axisrh);
    rightStickVert = gamepad_axis_value(0, gp_axisrv);
    
    //Moving the FIRST player with the left stick
    if(playerParty[0].canMove &amp;&amp; partyCanMove) {
        if((leftStickHoriz &gt; lst) &amp;&amp; place_free(playerParty[0].x + playerParty[0].battleCollisionSpeed, playerParty[0].y)) { //Moving Right
            playerParty[0].x -= (leftStickHoriz * -playerParty[0].battleMoveSpeed);
            playerParty[0].sprite_index = playerParty[0].myAnims[0];
            playerParty[0].image_index += leftStickHoriz / 3;
        }
        if((leftStickHoriz &lt; -lst) &amp;&amp; place_free(playerParty[0].x - playerParty[0].battleCollisionSpeed, playerParty[0].y)) { //Moving Left
            playerParty[0].x -= (leftStickHoriz * -playerParty[0].battleMoveSpeed);
            playerParty[0].sprite_index = playerParty[0].myAnims[2];
            playerParty[0].image_index -= leftStickHoriz / 3;
        }
        if((leftStickVert &gt; lst) &amp;&amp; place_free(playerParty[0].x, playerParty[0].y + playerParty[0].battleCollisionSpeed)) { //Moving Down
            playerParty[0].y -= (leftStickVert * -playerParty[0].battleMoveSpeed);
            playerParty[0].sprite_index = playerParty[0].myAnims[3];
            playerParty[0].image_index += leftStickVert / 3;
        }
        if((leftStickVert &lt; -lst) &amp;&amp; place_free(playerParty[0].x, playerParty[0].y - playerParty[0].battleCollisionSpeed)) { //Moving Up
            playerParty[0].y -= (leftStickVert * -playerParty[0].battleMoveSpeed);
            playerParty[0].sprite_index = playerParty[0].myAnims[1];
            playerParty[0].image_index -= leftStickVert / 3;
        }
        if(leftStickHoriz &gt; .75 &amp;&amp; gamepad_button_check_pressed(0, gp_shoulderl) &amp;&amp; playerParty[0].currentStamina &gt;= playerParty[0].rollCost) {//Roll Right
            if(!place_free(playerParty[0].x + rollDistance, playerParty[0].y)) { //Move the player as close to the collision as possible
            
            }
            else {
                //Play animation of character rolling
                playerParty[0].x += rollDistance;
                playerParty[0].currentStamina -= playerParty[0].rollCost;
            }
        }
        if(leftStickHoriz &lt; -.75 &amp;&amp; gamepad_button_check_pressed(0, gp_shoulderl) &amp;&amp; playerParty[0].currentStamina &gt;= playerParty[0].rollCost) { //Roll Left
            if(!place_free(playerParty[0].x - rollDistance, playerParty[0].y)) {
            
            }
            else {
                //Play animation of character rolling
                playerParty[0].x -= rollDistance
                playerParty[0].currentStamina -= playerParty[0].rollCost;
            }
        }
        if(leftStickVert &gt; .75 &amp;&amp; gamepad_button_check_pressed(0, gp_shoulderl) &amp;&amp; playerParty[0].currentStamina &gt;= playerParty[0].rollCost) { //Roll Up
            if(!place_free(playerParty[0].x, playerParty[0].y + playerParty[0].rollDistance)) {
            
            }
            else {
                //Play animation
                playerParty[0].y += rollDistance;
                playerParty[0].currentStamina -= playerParty[0].rollCost;
            }
        }
        if(leftStickVert &lt; -.75 &amp;&amp; gamepad_button_check_pressed(0, gp_shoulderl) &amp;&amp; playerParty[0].currentStamina &gt;= playerParty[0].rollCost) { //Roll Down
            if(!place_free(playerParty[0].x, playerParty[0].y - playerParty[0].rollDistance)) {
            
            }
            else {
            //PLay anim
            playerParty[0].y -= rollDistance;
            playerParty[0].currentStamina -= playerParty[0].rollCost;
            }
        } 
    }
    
    //Moving the SECOND player with the right stick
    if(playerParty[1].canMove &amp;&amp; partyCanMove) {
        if((rightStickHoriz &gt; lst) &amp;&amp; place_free(playerParty[1].x + playerParty[1].battleMoveSpeed, playerParty[1].y)) { //Moving Right
            playerParty[1].x -= (rightStickHoriz * -playerParty[1].battleMoveSpeed);
            playerParty[1].sprite_index = playerParty[1].myAnims[0];
            playerParty[1].image_index += rightStickHoriz / 3;
        }
        if((rightStickHoriz &lt; -lst) &amp;&amp; place_free(playerParty[1].x - playerParty[1].battleMoveSpeed, playerParty[1].y)) { //Moving Left
            playerParty[1].x -= (rightStickHoriz * -playerParty[1].battleMoveSpeed);
            playerParty[1].sprite_index = playerParty[1].myAnims[2];
            playerParty[1].image_index -= rightStickHoriz / 3;
        }
        if((rightStickVert &gt; lst) &amp;&amp; place_free(playerParty[1].x, playerParty[1].y + playerParty[1].battleMoveSpeed)) { //Moving Down
            playerParty[1].y -= (rightStickVert * -playerParty[1].battleMoveSpeed);
            playerParty[1].sprite_index = playerParty[1].myAnims[3];
            playerParty[1].image_index += rightStickVert / 3;
        }
        if((rightStickVert &lt; -lst) &amp;&amp; place_free(playerParty[1].x, playerParty[1].y - playerParty[1].battleMoveSpeed)) { //Moving Up
            playerParty[1].y -= (rightStickVert * -playerParty[1].battleMoveSpeed);
            playerParty[1].sprite_index = playerParty[1].myAnims[1];
            playerParty[1].image_index -= rightStickVert / 3;
        }
        if(rightStickHoriz &gt; .75 &amp;&amp; gamepad_button_check_pressed(0, gp_shoulderr) &amp;&amp; playerParty[1].currentStamina &gt;= playerParty[1].rollCost) {//Roll Right
            //Play animation of character rolling
            playerParty[1].x += 50;
            playerParty[1].currentStamina -= playerParty[1].rollCost;
        }
        if(rightStickHoriz &lt; -.75 &amp;&amp; gamepad_button_check_pressed(0, gp_shoulderr) &amp;&amp; playerParty[1].currentStamina &gt;= playerParty[1].rollCost) { //Roll Left
            //Play animation of character rolling
            playerParty[1].x -= 50;
            playerParty[1].currentStamina -= playerParty[1].rollCost;
        }
        if(rightStickVert &gt; .75 &amp;&amp; gamepad_button_check_pressed(0, gp_shoulderr) &amp;&amp; playerParty[1].currentStamina &gt;= playerParty[1].rollCost) { //Roll Up
            //Play animation
            playerParty[1].y += 50;
            playerParty[1].currentStamina -= playerParty[1].rollCost;
        }
        if(rightStickVert &lt; -.75 &amp;&amp; gamepad_button_check_pressed(0, gp_shoulderr) &amp;&amp; playerParty[1].currentStamina &gt;= playerParty[1].rollCost) { //Roll Down
            //PLay anim
            playerParty[1].y -= 50;
            playerParty[1].currentStamina -= playerParty[1].rollCost;
        }
    }
    //Menu Selection
}/*
    if(gamepad_button_check_pressed(0, gp_shoulderrb) &amp;&amp; playerParty0Menu == false &amp;&amp; menuLevel == 0) //Only allow 1 menu at a time
    {
        playerParty1Menu = true;
        ++menuLevel;
    }
    if(gamepad_button_check_pressed(0, gp_face2) &amp;&amp; playerParty1Menu == true) { //Go back after making a selection
        --menuLevel;
        menuLevel = clamp(menuLevel, 0, 3);
        if(menuLevel == 0) //Reset the boolean for party 1
            playerParty1Menu = false;
        if(party1IsFighting) { //Reset fighting Conditions
            party1IsFighting = false;
            partyCanMove = true;
            stickSize = 1;
            gamepad_set_vibration(0, 0, 0);
            if(instance_exists(objLeftStick) &amp;&amp; instance_exists(objRightStick)) { //Delete the sticks if they're backing out of combat
                leftStick = instance_find(objLeftStick, 0);
                with(leftStick)
                    instance_destroy();
                rightStick = instance_find(objRightStick, 0);
                with(rightStick)
                    instance_destroy();
            }
        }
    }
    //First level of menu choices
    if(playerParty1Menu &amp;&amp; menuLevel == 1) {
        if(gamepad_button_check_pressed(0, gp_padr)) { //Choosing Right on the D-Pad
            
        }
        if(gamepad_button_check_pressed(0, gp_padu)) { //Choosing Up on the D-Pad
            ++menuLevel;
            party1IsFighting = true;
            party1IsDefending = false;
        }
        if(gamepad_button_check_pressed(0, gp_padl)) { //Choosing Left on the D-Pad
            
        }
        if(gamepad_button_check_pressed(0, gp_padd)) { //Choosing Down on the D-Pad
            ++menuLevel;
            party1IsDefending = true;
        }
        if(gamepad_button_check_pressed(0, gp_padd) &amp;&amp; !playerParty[1].canMove) { //STOP defending
            menuLevel = 0;
            playerParty[1].isDefending = false;
            playerParty[1].canMove = true;
            party1IsDefending = false;
            playerParty1Menu = false;
        }
    }
    //Second Level of menu choices
    if(playerParty1Menu &amp;&amp; menuLevel == 2) {
        if(gamepad_button_check_pressed(0, gp_face1) &amp;&amp; party1IsDefending) { //Choosing to begin defending
            menuLevel = 0;
            playerParty[1].isDefending = true;
            playerParty[1].canMove = false;
            playerParty1Menu = false;
        }
        if(party1IsFighting &amp;&amp; playerParty[1].weaponAT == "Both" &amp;&amp; gamepad_button_check_pressed(0, gp_face4)) { //Switch between attack types
            if(playerParty[1].tempAT == "Slice")
                playerParty[1].tempAT = "Focused";
            else if(playerParty[1].tempAT == "Focused")
                playerParty[1].tempAT = "Slice";
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Energy Recharging
if(inCombat)
{
    currentStamina = clamp(currentStamina, 0, maxStamina);
    currentStamina += staminaRecovery;
}
//Restore stamina outside of battle
if(!inCombat)
    currentStamina = maxStamina;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Screens
/*
if(gamepad_button_check(0, gp_start)) {
    if(partyCanMove &amp;&amp; !inCombat) { //Enter Main Menu
        inCharacterScreen = true;
        partyCanMove = false;
    }
}

//Exit Menu From Anywhere
if(gamepad_button_check(0, gp_select)) {
    inCharacterScreen = false;
    partyCanMove = true;
}

//Choosing a character in the character screen depending on partySize
if(inCharacterScreen &amp;&amp; partySize == 1) { //Party size of 1

}
if(inCharacterScreen &amp;&amp; partySize == 2) { //Party size of 2
    if(gamepad_button_check(0, gp_padd) &amp;&amp; characterScreenSelection == 0) { //Choosing down while on first character
        characterScreenSelection = 1;
    }
    else if(gamepad_button_check(0, gp_padu) &amp;&amp; characterScreenSelection == 1) { //Choosing up on second character
        characterScreenSelection = 0;
    }
}
if(inCharacterScreen &amp;&amp; partySize == 3) { //Party size of 3
    if(gamepad_button_check(0, gp_padd) &amp;&amp; characterScreenSelection == 0) { //Choosing down while on first character
        characterScreenSelection = 1;
    }
    if(gamepad_button_check(0, gp_padu) &amp;&amp; characterScreenSelection == 1) { //Choosing up on second character
        characterScreenSelection = 0;
    }
    if(gamepad_button_check(0, gp_padr) &amp;&amp; characterScreenSelection == 0) { //Choosing right on first character
        characterScreenSelection = 2;
    }
    if(gamepad_button_check(0, gp_padl) &amp;&amp; characterScreenSelection == 2) { //Choosing left on third character
        characterScreenSelection = 0;
    }
}
if(inCharacterScreen &amp;&amp; partySize == 4) { //Party size of 4
    if(gamepad_button_check(0, gp_padd) &amp;&amp; characterScreenSelection == 0) { //Choosing down while on first character
        characterScreenSelection = 1;
    }
    if(gamepad_button_check(0, gp_padu) &amp;&amp; characterScreenSelection == 1) { //Choosing up on second character
        characterScreenSelection = 0;
    }
    if(gamepad_button_check(0, gp_padd) &amp;&amp; characterScreenSelection == 2) { //Choosing down while on third character
        characterScreenSelection = 3;
    }
    if(gamepad_button_check(0, gp_padr) &amp;&amp; characterScreenSelection == 0) { //Choosing right on first character
        characterScreenSelection = 2;
    }
    if(gamepad_button_check(0, gp_padr) &amp;&amp; characterScreenSelection == 1) { //Choosing right on second character
        characterScreenSelection = 3;
    }
    if(gamepad_button_check(0, gp_padu) &amp;&amp; characterScreenSelection == 3) { //Choosing up on fourth character
        characterScreenSelection = 2;
    }
    if(gamepad_button_check(0, gp_padl) &amp;&amp; characterScreenSelection == 2) { //Choosing left on third character
        characterScreenSelection = 0;
    }
    if(gamepad_button_check(0, gp_padl) &amp;&amp; characterScreenSelection == 3) { //Choosing left on fourth character
        characterScreenSelection = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Engage in dialogue
if(myDir == 0 &amp;&amp; !isTalking) {
    if(collision_line(x, y, x, y - 30, objNPCParent, false, true) != noone) {
        if(gamepad_button_check(0, gp_face1) &amp;&amp; !isTalking) {
            talkingObject = collision_line(x, y, x, y - 30, objNPCParent, false, true);
            scrStartDialogue(self.id.object_index, talkingObject);
        }
    }
}
if(myDir == 90 &amp;&amp; !isTalking) {
    if(collision_line(x, y, x + 30, y, objNPCParent, false, true) != noone) {
        if(gamepad_button_check(0, gp_face1) &amp;&amp; !isTalking) {
            talkingObject = collision_line(x, y, x + 30, y, objNPCParent, false, true);
            scrStartDialogue(self.id.object_index, talkingObject);
        }
    }
}
if(myDir == 180 &amp;&amp; !isTalking) {
    if(collision_line(x, y, x, y + 30, objNPCParent, false, true) != noone) {
        if(gamepad_button_check(0, gp_face1) &amp;&amp; !isTalking) {
            talkingObject = collision_line(x, y, x, y + 30, objNPCParent, false, true);
            scrStartDialogue(self.id.object_index, talkingObject);
        }
    }
}
if(myDir == 270 &amp;&amp; !isTalking) {
    if(collision_line(x, y, x - 30, y, objNPCParent, false, true) != noone) {
        if(gamepad_button_check(0, gp_face1) &amp;&amp; !isTalking) {
            talkingObject = collision_line(x, y, x - 30, y, objNPCParent, false, true);
            scrStartDialogue(self.id.object_index, talkingObject);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objInventoryParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pick up items

//Add to player inventory
nextSpot = scrNextEmptySpot(playerInventory);
ds_grid_set(playerInventory, nextSpot, 0, other.name);
ds_grid_set(playerInventory, nextSpot, 1, other.sprite);
ds_grid_set(playerInventory, nextSpot, 2, other.description);

with(other)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemyParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin Battle Steps
if(!inCombat)
{
    enemyID = other.id.object_index; //This stores the enemy object name (like objFly) into this variable
    
    //Destroy monster in original room
    with(other)
    {
        instance_destroy();
    }
    
    inCombat = true;
    
    //Decide which battle room to go to
    battleRoom = rmTestCombat;
    room_goto(battleRoom);
    
    //Set alarm to spawn enemies
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BATTLE GUI
if(inCombat) {
    ///Draw health and names
    draw_text(150, 16, "Player 1 HEALTH");
    draw_healthbar(100, 32, 300, 48, (playerParty[0].currentHealth/playerParty[0].maxHealth) * 100, c_black, c_red, c_blue, 0, true, true)
    draw_text(150, 48, "Player 2 HEALTH");
    draw_healthbar(100, 64, 300, 80, (playerParty[1].currentHealth/playerParty[1].maxHealth) * 100, c_black, c_red, c_blue, 0, true, true)
}

///Draw Menu Items
if(inCombat) {
    //Menu Level 1 for both players
    if(playerParty[0].isInMenu &amp;&amp; playerParty[0].menuLevel == 1) {
        draw_sprite(sprDPad, 0, 160, 896); //Draw the dPad
        draw_sprite(sprSaraWalkDown, 0, 25, 896); //Draw sprite associated with player
        //Text
        draw_text(140, 840, "Fight");
        draw_text(200, 887, "Defend");
        draw_text(140, 936, "Items");
        draw_text(80, 887, "Magic");
    }
    else if(playerParty[1].isInMenu &amp;&amp; playerParty[1].menuLevel == 1) {
        draw_sprite(sprDPad, 0, 1728, 896);
        draw_sprite(sprSkeletonWalkDown, 0, 1850, 896);
        //Text
        draw_text(1708, 840, "Fight");
        draw_text(1768, 887, "Defend");
        draw_text(1708, 936, "Items");
        draw_text(1648, 887, "Magic");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Menu Items OLD WAY
draw_self();
/*
if(inCombat) {
    draw_self();
    //Menu Level 1 for both players
    if(playerParty[0].isInMenu &amp;&amp; playerParty[0].menuLevel == 1) {
        draw_sprite(sprDPad, 0, 160, 896); //Draw the dPad
        draw_sprite(sprSaraWalkDown, 0, 25, 896); //Draw sprite associated with player
        //Text
        draw_text(140, 840, "Fight");
        draw_text(200, 887, "Defend");
        draw_text(140, 936, "Items");
        draw_text(80, 887, "Magic");
    }
    else if(playerParty[0].isInMenu &amp;&amp; playerParty[0].menuLevel == 1) {
        draw_sprite(sprDPad, 0, 1728, 896);
        draw_sprite(sprSkeletonWalkDown, 0, 1850, 896);
        //Text
        draw_text(1708, 840, "Fight");
        draw_text(1768, 887, "Defend");
        draw_text(1708, 936, "Items");
        draw_text(1648, 887, "Magic");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stamina
draw_healthbar(self.x - 32, self.y + 32, self.x + 32, self.y + 48, 
(self.currentStamina/self.maxStamina) * 100, c_black, c_green, c_green, 0, true, true)
//draw_text(self.x - 60, self.y + 60, string(self.maxStamina) + string("/") + string(self.currentStamina) + string(" Stamina"));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
