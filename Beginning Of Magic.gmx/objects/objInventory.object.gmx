<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory Variables &amp; Set Up

//Variables related to inventory
globalvar playerInventory, isInInventory, playerInventoryWeight, masterInventory;
playerInventory = ds_grid_create(10, 10);
isInInventory = false;
playerInventoryWeight = 0;


itemCurrentlySelected = 0;
optionCurrentlySelected = 0;
uniqueItems = 0;
isShowingOptions = false;

itemOptions[0] = "Use";
itemOptions[1] = "Discard";
itemOptions[2] = "More Info";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Master Inventory List
masterInventory[0, 0] = "Red Potion";
masterInventory[0, 1] = sprRedPotion;
masterInventory[0, 2] = "A Healing Drink";
masterInventory[1, 0] = "Short Sword";
masterInventory[1, 1] = sprShortSword;
masterInventory[1, 2] = "A short sword";
masterInventory[2, 0] = "Pretty Flowers";
masterInventory[2, 1] = sprFlowers;
masterInventory[2, 2] = "A beautiful boquet of flowers";
masterInventory[3, 0] = "Gold Coin";
masterInventory[3, 1] = sprCoin;
masterInventory[3, 2] = "A gold coin";
masterInventory[4, 0] = "Golden Necklace";
masterInventory[4, 1] = sprNecklace;
masterInventory[4, 2] = "A powerful necklace";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Access &amp; Inventory Modification
/*
if(gamepad_button_check_pressed(0, gp_start) &amp;&amp; !inCombat &amp;&amp; !isInInventory) {
    instance_deactivate_all(true);
    isInInventory = true;
}

else if(gamepad_button_check_pressed(0, gp_start) &amp;&amp; !inCombat &amp;&amp; isInInventory) {
    instance_activate_all();
    isInInventory = false;
}



if(isInInventory &amp;&amp; !isShowingOptions) {
    ///Select items in inventory
    if(gamepad_button_check_pressed(0, gp_padd) &amp;&amp; (itemCurrentlySelected + 1) &gt; uniqueItems)
        itemCurrentlySelected = 0;
    else if(gamepad_button_check_pressed(0, gp_padd)) {
        itemCurrentlySelected = clamp(++itemCurrentlySelected, 0, uniqueItems);
    }
    if(gamepad_button_check_pressed(0, gp_padu) &amp;&amp; (itemCurrentlySelected - 1) &lt; 0)
        itemCurrentlySelected = uniqueItems;
    else if(gamepad_button_check_pressed(0, gp_padu)) {
        itemCurrentlySelected = clamp(--itemCurrentlySelected, 0, uniqueItems);
    }
    ///Bring up options menu
    if(gamepad_button_check_pressed(0, gp_face1))
        isShowingOptions = true;
}

//Choosing an option within inventory
if(isInInventory &amp;&amp; isShowingOptions) {
    //Backing out
    if(gamepad_button_check_pressed(0, gp_face2)) {
        isShowingOptions = false;
        optionCurrentlySelected = 0;
    }
    
    //Choosing the options
    if(gamepad_button_check_pressed(0, gp_padd))
        optionCurrentlySelected = clamp(++optionCurrentlySelected, 0, array_length_1d(itemOptions) - 1);
    else if(gamepad_button_check_pressed(0, gp_padu)) {
        optionCurrentlySelected = clamp(--optionCurrentlySelected, 0, array_length_1d(itemOptions) - 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Inventory
/*
if(isInInventory) {
    draw_sprite(sprInventory, 0, room_width/2, room_height/2);
    
    //Draws items
    for(i = 0; i &lt; ds_grid_height(playerInventory); ++i) {
        if(ds_grid_get(playerInventory, i, 0) != 0) { //Only draw items, not empty
            //Name of item
            draw_text(450, 325 + (i * 32), ds_grid_get(playerInventory, i, 0));
            //Sprite
            draw_sprite(ds_grid_get(playerInventory, i, 1), 0, 430, 325 + (i * 32));
            //Description
            draw_text(625, 325 + (i * 32), ds_grid_get(playerInventory, i, 2));
            
            //Draw options for items
            if(isShowingOptions) {
                draw_sprite(sprInventoryOptions, 0, 350, 375 + (itemCurrentlySelected * 32));
                draw_text(300, 320 + (itemCurrentlySelected * 32), itemOptions[0]);
                draw_text(300, 335 + (itemCurrentlySelected * 32), itemOptions[1]);
                draw_text(300, 350 + (itemCurrentlySelected * 32), itemOptions[2]);
                
                //Highlight currently selected option
                draw_set_alpha(.25);
                draw_rectangle_colour(295, 320 + (15 * optionCurrentlySelected) + (32 * itemCurrentlySelected), 395, 335 + (15 * optionCurrentlySelected) + (32 * itemCurrentlySelected), c_aqua, c_aqua, c_aqua, c_aqua, false); 
                draw_set_alpha(1);
            }
            
            uniqueItems = max(i);
        }
    }
    //Highlilght the currently selected item
    draw_set_alpha(.25);
    draw_rectangle_colour(415, 315 + (32 * itemCurrentlySelected), 900, 345 + (32 * itemCurrentlySelected), c_red, c_red, c_red, c_red, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
